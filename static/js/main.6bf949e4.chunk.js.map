{"version":3,"sources":["components/BaseLayout/NavBar.js","components/GreetingPage.js","api/ratesApi.js","components/Converter/ConverterTile.js","components/Converter/ConverterPage.js","components/Currencies/CurrenciesListTable.js","components/Currencies/CurrencyCard.js","components/Currencies/CurrenciesListCards.js","components/Currencies/CurrencySelector.js","components/Currencies/ComponentSelector.js","api/countriesApi.js","components/Currencies/CurrenciesPage.js","components/BaseLayout/Router.js","components/BaseLayout/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","Menu","Item","react_router_dom","to","GreetingPage","Segment","ratesApi","require","create","baseURL","getLatest","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","baseCurrency","currencies","_ref2","data","wrap","_context","prev","next","get","params","base","symbols","sent","abrupt","stop","_x","_x2","apply","this","arguments","ConverterTile","state","isLoading","baseAmount","targetCurrency","targetAmount","rates","setState","keys","_","prevState","_this$state","calculateTargetAmount","_this$state2","_this2","Select","compact","defaultValue","options","map","currency","key","text","value","onChange","onBaseCurrencyChange","Input","type","e","onBaseAmountChange","target","_this3","onTargetCurrencyChange","_this$state3","Loader","active","style","display","justifyContent","alignItems","renderBaseData","Icon","Group","size","name","renderTargetData","Component","ConverterPage","Fragment","Converter_ConverterTile","CurrenciesList","props","_props$rates","_props$countries","countries","Table","celled","Header","Row","textAlign","HeaderCell","Body","index","Cell","Image","centered","src","flag","CurrencyCard","rate","_ref$country","country","Card","Content","floated","concat","Meta","extra","description","CurrenciesListCards","filter","Currencies_CurrencyCard","CurrencySelector","initialValue","ComponentSelector","components","component","countriesApi","getAll","CurenciesPage","baseComponent","onCurrencyChanged","_this","onComponentChanged","renderCurrenciesList","CurrenciesListTable","Currencies_CurrenciesListCards","console","log","getExternalData","loadRates","length","getcountries","countriesArray","currencyCodes","countryByCurrencyCode","reduce","acc","currencyCode","find","alpha3Code","some","code","toUpperCase","objectSpread","defineProperty","undefined","Currencies_CurrencySelector","Currencies_ComponentSelector","Router","react_router","path","exact","CurrenciesPage","BaseLayout","Container","BaseLayout_NavBar","BaseLayout_Router","App","components_BaseLayout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6bf949e4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Menu } from \"semantic-ui-react\";\r\n\r\nconst NavBar = () => (\r\n  <Menu>\r\n    <Menu.Item>React Example</Menu.Item>\r\n    <Menu.Item><Link to='/'>Home</Link></Menu.Item>\r\n    <Menu.Item><Link to='/converter'>Converter</Link></Menu.Item>\r\n    <Menu.Item><Link to='/currencies'>Currencies</Link></Menu.Item>\r\n  </Menu>\r\n);\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport { Segment } from \"semantic-ui-react\";\r\n\r\nconst GreetingPage = () => (\r\n  <Segment>\r\n    <h1> GreetingPage </h1>\r\n  </Segment>\r\n);\r\n\r\nexport default GreetingPage;","const axios = require(\"axios\");\r\n\r\nconst ratesApi = axios.create({ baseURL: \"https://api.ratesapi.io/api\" });\r\n\r\nconst getLatest = async (baseCurrency, currencies) => {\r\n    const { data } = await ratesApi.get(\"/latest\", { params: { base: baseCurrency, symbols: currencies } });\r\n    return data;\r\n};\r\n\r\nexport { ratesApi, getLatest };","import React, { Component } from \"react\";\r\nimport { Select, Input, Loader, Segment, Icon } from \"semantic-ui-react\";\r\nimport { getLatest } from \"../../api/ratesApi\";\r\n\r\nclass ConverterTile extends Component {\r\n  state = {\r\n    isLoading: true,\r\n    currencies: [],\r\n    baseCurrency: null,\r\n    baseAmount: 1,\r\n    targetCurrency: null,\r\n    targetAmount: 0,\r\n    rates: {}\r\n  };\r\n  \r\n  async componentDidMount() {\r\n    const { rates } = await getLatest();\r\n    this.setState({ \r\n      isLoading: false,\r\n      currencies: Object.keys(rates), \r\n      baseCurrency: Object.keys(rates)[0], \r\n      targetCurrency: Object.keys(rates)[1], \r\n      rates, \r\n    });\r\n  }\r\n\r\n  componentDidUpdate(_, prevState) {\r\n    const { baseAmount, baseCurrency, targetCurrency } = this.state; \r\n    if (prevState.baseAmount !== baseAmount \r\n      ||prevState.baseCurrency !== baseCurrency \r\n      ||prevState.targetCurrency !== targetCurrency   \r\n    )\r\n      this.calculateTargetAmount();\r\n  }\r\n\r\n  calculateTargetAmount() {\r\n    const { baseAmount, targetCurrency, rates } = this.state;\r\n    const targetAmount = baseAmount * rates[targetCurrency];\r\n    this.setState({ targetAmount });\r\n  }\r\n\r\n  onBaseAmountChange(baseAmount) {\r\n    this.setState({ baseAmount });\r\n  }\r\n\r\n  async onBaseCurrencyChange(baseCurrency) {\r\n    const { rates } = await getLatest(baseCurrency);\r\n    this.setState({ rates, baseCurrency });\r\n  }\r\n\r\n  onTargetCurrencyChange(targetCurrency) {\r\n    this.setState({ targetCurrency });\r\n  }\r\n\r\n  renderBaseData(baseAmount, baseCurrency, currencies) {\r\n    return <div>\r\n      <Select compact\r\n        defaultValue={baseCurrency} \r\n        options={currencies.map(currency => ({ key: currency,  text: currency, value: currency }))}\r\n        onChange={(_, data) => this.onBaseCurrencyChange(data.value)}\r\n      />\r\n      <Input type=\"number\" defaultValue={baseAmount} onChange={ e => this.onBaseAmountChange(e.target.value) }  />\r\n    </div>\r\n  }\r\n\r\n  renderTargetData(targetAmount, targetCurrency, currencies) {\r\n    return <div>\r\n        <Input type=\"number\" value={targetAmount}/>\r\n        <Select compact\r\n          defaultValue={targetCurrency} \r\n          options={currencies.map(currency => ({ key: currency,  text: currency, value: currency }))}\r\n          onChange={(_, data) => this.onTargetCurrencyChange(data.value)}\r\n        />\r\n    </div>\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, baseAmount, baseCurrency, targetAmount, targetCurrency, currencies } = this.state;\r\n    if (isLoading) \r\n        return <Loader active />\r\n\r\n    return <Segment style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }} >\r\n      {this.renderBaseData(baseAmount, baseCurrency, currencies)}\r\n\r\n      <Icon.Group size=\"large\">\r\n        <Icon size=\"big\" name=\"circle outline\" />\r\n        <Icon name=\"angle double right\" />\r\n      </Icon.Group>\r\n\r\n      {this.renderTargetData(targetAmount, targetCurrency, currencies)}\r\n    </Segment>\r\n  }\r\n};\r\n\r\nexport default ConverterTile;","import React from \"react\";\r\nimport ConverterTile from \"./ConverterTile\";\r\nimport { Segment } from \"semantic-ui-react\";\r\n\r\nconst ConverterPage = () => (\r\n  <>\r\n    <Segment>\r\n      <h1> ConverterPage </h1>\r\n    </Segment>\r\n    <Segment>\r\n      <ConverterTile />\r\n    </Segment>\r\n  </>\r\n);\r\n\r\nexport default ConverterPage;","import React from \"react\";\r\nimport { Table, Image } from \"semantic-ui-react\";\r\n\r\nconst CurrenciesList = props => {\r\n  const { rates = {}, countries = {} } = props;\r\n\r\n  return <Table celled>\r\n    <Table.Header>\r\n      <Table.Row style={{ textAlign: \"center\" }} >\r\n        <Table.HeaderCell>Currency</Table.HeaderCell>\r\n        <Table.HeaderCell>Country Name</Table.HeaderCell>\r\n        <Table.HeaderCell>Flag</Table.HeaderCell>\r\n        <Table.HeaderCell>Rate</Table.HeaderCell>\r\n      </Table.Row>\r\n    </Table.Header>\r\n    <Table.Body>\r\n      {Object.keys(rates).map((currency, index) => \r\n        <Table.Row key={index}>\r\n          <Table.Cell>{currency}</Table.Cell> \r\n          <Table.Cell>{countries[currency].name}</Table.Cell> \r\n          <Table.Cell> <Image centered size=\"mini\" src={countries[currency].flag} /></Table.Cell>\r\n          <Table.Cell>{rates[currency]}</Table.Cell> \r\n        </Table.Row>)          \r\n      }\r\n    </Table.Body>\r\n  </Table>\r\n};\r\n\r\nexport default CurrenciesList;","import React from \"react\";\r\nimport { Card, Image } from 'semantic-ui-react';\r\n\r\nconst CurrencyCard = ({ baseCurrency, name, rate, country = {} }) => (\r\n  <Card>\r\n    <Card.Content>\r\n      <Image floated=\"right\" size=\"mini\" src={country.flag} />\r\n      <Card.Header>{`${rate} ${name}`}</Card.Header>\r\n      <Card.Meta>{`1 ${baseCurrency}`}</Card.Meta>\r\n    </Card.Content>\r\n    <Card.Content extra description={country.name} />\r\n  </Card>\r\n);\r\n\r\nexport default CurrencyCard;","import React from \"react\";\r\nimport { Card } from \"semantic-ui-react\";\r\nimport CurrencyCard from \"./CurrencyCard\";\r\n\r\nconst CurrenciesListCards = props => {\r\n  const { rates = {}, baseCurrency, countries = {} } = props;\r\n\r\n  return <Card.Group centered >\r\n    {Object.keys(rates)\r\n      .filter(currency => currency !== baseCurrency)\r\n      .map((currency, index) => <CurrencyCard key={index} baseCurrency={baseCurrency} name={currency} rate={rates[currency]} country={countries[currency]} />)          \r\n    }\r\n  </Card.Group>\r\n};\r\n\r\nexport default CurrenciesListCards;","import React from \"react\";\r\nimport { Select } from \"semantic-ui-react\";\r\n\r\nconst CurrencySelector = ({ currencies, onChange, initialValue }) => (\r\n  <Select \r\n    defaultValue={initialValue} \r\n    options={currencies.map(currency => ({ key: currency,  text: currency, value: currency }))}\r\n    onChange={(_, data) => onChange(data.value)}\r\n  />\r\n);\r\n\r\nexport default CurrencySelector;","import React from \"react\";\r\nimport { Select } from \"semantic-ui-react\";\r\n\r\nconst ComponentSelector = ({ components, onChange, initialValue }) => (\r\n  <Select \r\n    defaultValue={initialValue} \r\n    options={components.map(component => ({ key: component, text: component, value: component }))} \r\n    onChange={(_, data) => onChange(data.value)}\r\n  />\r\n);\r\n\r\nexport default ComponentSelector;","const axios = require(\"axios\");\r\n\r\nconst countriesApi = axios.create({ baseURL: \"https://restcountries.eu/rest/v2\" });\r\n\r\nconst getAll = async () => {\r\n  const { data } = await countriesApi.get(\"/all\");\r\n  return data;\r\n};\r\n\r\nconst getByCurrency = async (currencyCode = \"\") => {\r\n  const { data } = await countriesApi.get(`/currency/${currencyCode}`);\r\n  return data;\r\n};\r\nexport { countriesApi, getAll, getByCurrency };","import React, { Component } from \"react\";\r\nimport CurenciesListTable from \"./CurrenciesListTable\";\r\nimport CurenciesListCards from \"./CurrenciesListCards\";\r\nimport CurrencySelector from \"./CurrencySelector\";\r\nimport ComponentSelector from \"./ComponentSelector\";\r\nimport { getLatest } from \"../../api/ratesApi\";\r\nimport { Segment, Loader } from \"semantic-ui-react\";\r\nimport { getAll } from \"../../api/countriesApi\";\r\n\r\nclass CurenciesPage extends Component {\r\n  state = { \r\n    isLoading: true,\r\n    baseCurrency: \"USD\",\r\n    currencies: [],\r\n    rates: {},\r\n    components: [ \"Cards\", \"Table\" ],\r\n    baseComponent: \"Cards\",\r\n    countries: {}\r\n  };\r\n    \r\n  async componentDidMount() {\r\n    await this.getExternalData()\r\n  }\r\n\r\n  async componentDidUpdate(_, prevState) {\r\n    if (prevState.baseCurrency === this.state.baseCurrency)\r\n      return;\r\n    await this.getExternalData();\r\n  }\r\n\r\n  async getExternalData() {\r\n    const { baseCurrency, countries } = this.state;\r\n    const { rates } = await this.loadRates(baseCurrency);\r\n    if (Object.keys(countries).length !== 0)\r\n      return this.setState({ rates, currencies: Object.keys(rates), isLoading: false });\r\n\r\n    const countriesArray = await this.getcountries();\r\n    const currencyCodes = Object.keys(rates);\r\n    const countryByCurrencyCode = currencyCodes.reduce((acc, currencyCode) => {\r\n      const country = countriesArray.find(country => \r\n        country.alpha3Code !== \"ATA\" \r\n        && \r\n        country.currencies.some(currency => currency.code && currency.code.toUpperCase() === currencyCode.toUpperCase()));\r\n      return { ...acc, [currencyCode]: country ? country : undefined };\r\n    }, {});\r\n    \r\n    \r\n    this.setState({ rates, currencies: Object.keys(rates), isLoading: false, countries: countryByCurrencyCode });\r\n  }\r\n\r\n  async getcountries() {\r\n    return await getAll();\r\n  }\r\n\r\n  async loadRates(baseCurrency) {\r\n    return await getLatest(baseCurrency);\r\n  }\r\n\r\n  onCurrencyChanged = currency => this.setState({ baseCurrency: currency, isLoading: true });\r\n\r\n  onComponentChanged = component => this.setState({ baseComponent: component });\r\n\r\n  renderCurrenciesList = () => {\r\n    const { baseComponent, baseCurrency, rates, countries } = this.state;\r\n    \r\n    switch (baseComponent) {\r\n      case \"Table\":\r\n        return <CurenciesListTable rates={rates} countries={countries} />;\r\n      case \"Cards\":\r\n        return <CurenciesListCards baseCurrency={baseCurrency} rates={rates} countries={countries} />;\r\n      default:\r\n        console.log(\"Something bad\");\r\n    }\r\n  }\r\n    \r\n  render() {\r\n    return <>\r\n      <Segment>\r\n        <h1> CurrenciesPage </h1>\r\n      </Segment>\r\n      <Segment style={{ display: \"flex\", \"justifyContent\": \"space-between\" }} >\r\n        <CurrencySelector \r\n          currencies={this.state.currencies} \r\n          onChange={this.onCurrencyChanged} \r\n          initialValue={this.state.baseCurrency} \r\n        />\r\n        <ComponentSelector \r\n          components={this.state.components}\r\n          onChange={this.onComponentChanged}\r\n          initialValue={this.state.baseComponent} \r\n        />\r\n      </Segment>\r\n      <Segment >\r\n        {this.state.isLoading \r\n          ? <Loader active/> \r\n          : this.renderCurrenciesList()\r\n        }\r\n      </Segment>\r\n    </>\r\n  }\r\n};\r\n\r\nexport default CurenciesPage;","import React from 'react';\r\nimport GreetingPage from '../GreetingPage';\r\nimport ConverterPage from '../Converter/ConverterPage';\r\nimport CurrenciesPage from '../Currencies/CurrenciesPage';\r\nimport { Route } from \"react-router-dom\";\r\n\r\nconst Router = () => (\r\n  <>\r\n    <Route path=\"/\" exact component={GreetingPage} />\r\n    <Route path=\"/converter\" component={ConverterPage} />\r\n    <Route path=\"/currencies\" component={CurrenciesPage} />\r\n  </>\r\n);\r\n\r\nexport default Router;","import React from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport Router from \"./Router\";\r\nimport { Container } from \"semantic-ui-react\";\r\n\r\nconst BaseLayout = () => (\r\n  <>\r\n    <Container>\r\n      <NavBar />\r\n      <Router/>\r\n    </Container>\r\n  </>\r\n);\r\n\r\nexport default BaseLayout;","import React from 'react';\r\n// import './App.css';\r\nimport \"semantic-ui-less/semantic.less\"\r\nimport { HashRouter } from \"react-router-dom\"\r\nimport BaseLayout from \"./components/BaseLayout\";\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <BaseLayout />\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}